# This workflow builds and pushes images to the octopussamples DockerHub organization.

name: LoadGenerator Service Docker Build
'on':
  workflow_dispatch: {}
  push:
    paths:
      - 'src/loadgenerator/**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
      - id: fixed_branch_name
        name: Create branch name
        run: |
          BRANCH_NAME=${{ github.event.ref }}
          BRANCH_NAME=${BRANCH_NAME#refs/heads/}
          FIXED_BRANCH_NAME=${BRANCH_NAME//[^a-zA-Z0-9-]/-} 
          echo "fixedbranch=$FIXED_BRANCH_NAME" >> $GITHUB_ENV
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_SAMPLES_USERNAME }}
          password: ${{ secrets.DOCKERHUB_SAMPLES_PASSWORD }}
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: 5.x
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.14
        with:
          additionalArguments: /overrideconfig mode=Mainline
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:src/loadgenerator"
          push: true
          tags: octopussamples/loadgenerator:${{ steps.determine_version.outputs.semVer }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install Cyclone DX
        run: pip install cyclonedx-bom
      - name: Build SBOM
        run: cyclonedx-py -r --output bom.xml
        working-directory: src/loadgenerator
      - name: Build SBOM package
        run: >
          octo pack
          --id loadgenerator-sbom
          --version ${{ steps.determine_version.outputs.semVer }}
          --format zip
          --include **/bom.xml
        shell: bash
        working-directory: src/loadgenerator
      - name: Publish SBOM file
        run: >
          mvn deploy:deploy-file
          --batch-mode
          -Dfile=loadgenerator-sbom.${{ steps.determine_version.outputs.semVer }}.zip
          -Durl="https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@maven.pkg.github.com/${{ github.repository }}"
          -DgroupId=microservices-demo
          -DartifactId=loadgenerator-sbom
          -Dversion=${{ steps.determine_version.outputs.semVer }}
          -Dpackaging=zip;
           exit 0
        shell: "bash -l {0}" # Allow commands to fail by removing the default "-e" argument
        working-directory: src/loadgenerator
      - name: Create Mainline Octopus Release
        if: github.ref == 'refs/heads/main'
        uses: OctopusDeploy/create-release-action@v1
        with:
          api_key: ${{ secrets.OCTOPUS_APIKEY }}
          space: ${{ secrets.OCTOPUS_SPACE }}
          project: Load Generator
          channel: Mainline
          server: ${{ secrets.OCTOPUS_SERVER }}
          deploy_to: Development
          package: |
            Deploy App:loadgenerator:${{ steps.determine_version.outputs.semVer }}
            Check for Vulnerabilities:loadgenerator-sbom:${{ steps.determine_version.outputs.semVer }}
      # Only the frontend project has feature branches set up
#      - name: Create Branch Octopus Release
#        if: github.ref != 'refs/heads/main'
#        uses: OctopusDeploy/create-release-action@v1
#        with:
#          api_key: ${{ secrets.OCTOPUS_APIKEY }}
#          space: ${{ secrets.OCTOPUS_SPACE }}
#          project: Load Generator
#          channel: ${{ env.fixedbranch }}
#          server: ${{ secrets.OCTOPUS_SERVER }}
#          deploy_to: ${{ env.fixedbranch }}
#          package_version: ${{ steps.determine_version.outputs.semVer }}
